from typing import SupportsInt, Tuple, SupportsBytes, Iterable, Iterator
from pathlib import Path


class Buffer:
    def __bytes__(self) -> bytes: ...

    def __getbuffer__(self): ...

    def __releasebuffer__(self): ...


class Op:
    Avg = Op
    First = Op
    Last = Op
    Max = Op
    Median = Op
    Mid = Op
    Min = Op


class Automaton:
    @classmethod
    def always(cls) -> Automaton: ...

    @classmethod
    def never(cls) -> Automaton: ...

    @classmethod
    def str(cls, str: bytes) -> Automaton: ...

    @classmethod
    def subsequence(cls, str: bytes) -> Automaton: ...

    def complement(self) -> Automaton: ...

    def starts_with(self) -> Automaton: ...

    def intersection(self, other: Automaton) -> Automaton: ...

    def union(self, other: Automaton) -> Automaton: ...


class Map:
    @classmethod
    def build(cls, path: str | Path, iterable: Iterable[Tuple[SupportsBytes, SupportsInt]]) -> Buffer | None: ...

    def __init__(self, data): ...

    def __len__(self): ...

    def __iter__(self) -> Iterator[bytes]: ...

    def __getitem__(self, key) -> int: ...

    def __eq__(self, other) -> bool: ...

    def get(self, key, default=None) -> int | None: ...

    def keys(self) -> Iterator[bytes]: ...

    def values(self) -> Iterator[int]: ...

    def items(self) -> Iterator[Tuple[bytes, int]]: ...

    def range(self, ge=None, gt=None, le=None, lt=None) -> Iterator[Tuple[bytes, int]]: ...

    def starts_with(self, str: bytes, ge=None, gt=None, le=None, lt=None) -> Iterator[Tuple[bytes, int]]: ...

    def subsequence(self, str: bytes, ge=None, gt=None, le=None, lt=None) -> Iterator[Tuple[bytes, int]]: ...

    def search(self, automaton: Automaton, ge=None, gt=None, le=None, lt=None) -> Iterator[Tuple[bytes, int]]: ...

    def difference(self, *others, select=Op.Last) -> Buffer | None: ...

    def intersection(self, *others, select=Op.Last) -> Buffer | None: ...

    def symmetric_difference(self, *others, select=Op.Last) -> Buffer | None: ...

    def union(self, *others, select=Op.Last) -> Buffer | None: ...

class Set:
    @classmethod
    def build(cls, path: str | Path, iterable: Iterable[SupportsBytes]) -> Buffer | None: ...

    def __init__(self, data): ...

    def __len__(self): ...

    def __iter__(self) -> Iterator[bytes]: ...

    def __eq__(self, other) -> bool: ...

    def __gt__(self, other: Set) -> bool: ...

    def __ge__(self, other: Set) -> bool: ...

    def __lt__(self, other: Set) -> bool: ...

    def __le__(self, other: Set) -> bool: ...

    def isdisjoint(self, other: Set) -> bool: ...

    def issubset(self, other: Set) -> bool: ...

    def issuperset(self, other: Set) -> bool: ...

    def keys(self) -> Iterator[bytes]: ...

    def range(self, ge=None, gt=None, le=None, lt=None) -> Iterator[bytes]: ...

    def starts_with(self, str: bytes, ge=None, gt=None, le=None, lt=None) -> Iterator[bytes]: ...

    def subsequence(self, str: bytes, ge=None, gt=None, le=None, lt=None) -> Iterator[bytes]: ...

    def search(self, automaton: Automaton, ge=None, gt=None, le=None, lt=None) -> Iterator[bytes]: ...

    def difference(self, *others, select=Op.Last) -> Buffer | None: ...

    def intersection(self, *others, select=Op.Last) -> Buffer | None: ...

    def symmetric_difference(self, *others, select=Op.Last) -> Buffer | None: ...

    def union(self, *others, select=Op.Last) -> Buffer | None: ...
